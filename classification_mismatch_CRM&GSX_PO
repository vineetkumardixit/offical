{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93c756f5-82dc-4ffe-86de-f8fec43b270b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "This script merges two Excel workbooks: \"GSX\" and \"CRM\" based on the following columns:\n",
    "1. \"Purchase Order\" from the \"GSX\" workbook.\n",
    "2. \"reference_number\" from the \"CRM\" workbook.\n",
    "\n",
    "After merging, it identifies mismatches in \"Repair Classification\" based on predefined mappings:\n",
    "- Direct Submission -> DIRECT or SINGLE\n",
    "- Needs Extra Understanding -> NEEDS_EXTRA_UNDERSTANDING\n",
    "- Indirect Submission -> INDIRECT\n",
    "- ****** or Blank values are ignored if \"Repair Type\" = \"Onsite Service Facilitated\"\n",
    "\n",
    "The mismatched records are then saved in an output file named \"classification_mismatch.xlsx\".\n",
    "\n",
    "The script includes error handling to manage potential issues such as missing files, incorrect column names, or empty datasets.\n",
    "\"\"\"\n",
    "\n",
    "import pandas as pd  # Importing pandas for data manipulation\n",
    "\n",
    "try:\n",
    "    # Load the Excel workbooks\n",
    "    gsx_df = pd.read_excel(\"GSX.xlsx\")\n",
    "    crm_df = pd.read_excel(\"CRM.xlsx\")\n",
    "    \n",
    "    # Check if required columns exist\n",
    "    required_columns_gsx = {'Purchase Order', 'Repair Classification', 'Repair Type'}\n",
    "    required_columns_crm = {'reference_number', 'repair_classification'}\n",
    "    \n",
    "    if not required_columns_gsx.issubset(gsx_df.columns):\n",
    "        raise ValueError(\"Missing required columns in GSX workbook\")\n",
    "    if not required_columns_crm.issubset(crm_df.columns):\n",
    "        raise ValueError(\"Missing required columns in CRM workbook\")\n",
    "    \n",
    "    # Merge the dataframes on 'Purchase Order' (GSX) and 'reference_number' (CRM)\n",
    "    merged_df = gsx_df.merge(crm_df, left_on='Purchase Order', right_on='reference_number', how='inner')\n",
    "    \n",
    "    # Define mapping for 'Repair Classification'\n",
    "    classification_mapping = {\n",
    "        \"Direct Submission\": [\"DIRECT\", \"SINGLE\"],\n",
    "        \"Needs Extra Understanding\": [\"NEEDS_EXTRA_UNDERSTANDING\"],\n",
    "        \"Indirect Submission\": [\"INDIRECT\"]\n",
    "    }\n",
    "    \n",
    "    # Apply mapping to GSX column\n",
    "    def map_classification(value):\n",
    "        return classification_mapping.get(value, [])\n",
    "    \n",
    "    merged_df[\"GSX_Mapped\"] = merged_df[\"Repair Classification\"].apply(map_classification)\n",
    "    \n",
    "    # Identify mismatches\n",
    "    mismatch_df = merged_df[~merged_df.apply(lambda row: row[\"repair_classification\"] in row[\"GSX_Mapped\"], axis=1) &\n",
    "                            ~((merged_df[\"Repair Classification\"].isna() | (merged_df[\"Repair Classification\"] == \"******\")) &\n",
    "                              (merged_df[\"Repair Type\"] == \"Onsite Service Facilitated\"))]\n",
    "    \n",
    "    # Save mismatched records to a new Excel file\n",
    "    if not mismatch_df.empty:\n",
    "        mismatch_df.to_excel(\"classification_mismatch.xlsx\", index=False)\n",
    "        print(\"Mismatch data saved to classification_mismatch.xlsx\")\n",
    "    else:\n",
    "        print(\"No mismatches found between Repair Classification columns.\")\n",
    "    \n",
    "except FileNotFoundError as e:\n",
    "    print(f\"Error: {e}. Please check if both files exist.\")\n",
    "except ValueError as e:\n",
    "    print(f\"Error: {e}\")\n",
    "except Exception as e:\n",
    "    print(f\"An unexpected error occurred: {e}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
